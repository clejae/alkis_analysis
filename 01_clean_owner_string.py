# Clemens Jänicke
# github Repo: https://github.com/clejae

# ------------------------------------------ LOAD PACKAGES ---------------------------------------------------#
import os
import time
import geopandas as gpd
import pandas as pd
import re


# ------------------------------------------ USER VARIABLES ------------------------------------------------#
WD = r"C:\Users\IAMO\Documents\work_data\chapter1\ALKIS\01_clean_owner_strings"
IN_SHP = "v_eigentuemer_bb_reduced_25832.shp"

OUT_CSV_MANUAL_ASSIGNMENT = "owners_for_manual_assignment.csv"
OUT_CSV = "01_owners_and_addresses_separated.csv"  #r"eigentuemer_clean_names.csv"
# ------------------------------------------ DEFINE FUNCTIONS ------------------------------------------------#


def replace_characters_in_string(text, char_lst, replace_string):
    ## check if string is text
    if type(text) != str:
        text = str(text)

    for char in char_lst:
        text = text.replace(char, replace_string)

    return text


def remove_born_as_names(text, search_term):
    lst = text.split(',')

    out_lst = []
    for s, sub, in enumerate(lst):
        sub_lst = sub.split(' ')

        ## if search term in sub part, then don't keep
        if search_term not in sub_lst:
            sub = sub.strip()
            out_lst.append(sub)
        else:
            pass

    out_text = ', '.join(out_lst)

    return out_text


def remove_adress(text):
    lst = text.split(',')
    out_lst = []

    ## Define regex expressions
    ## find 4- or 5-digit numbers and a subsequent word
    rgx1 = r'\d{4,5} \b\w+\b'
    ## find just 5-digit numbers
    rgx2 = r'\d{5}'
    ## find street names with regex expression found at (for Straße 1, Straße 1a, Straße 1 a)
    ## https://stackoverflow.com/questions/5014537/regex-parse-streetname-number/5014624
    ## similar, but not quite working rgx3 = '(?:[^ ]+ ){0,5}\d{1,4} [a-f]?$'
    rgx3 = '^(.+)\s(\d+(\s*[^\d\s]+)*)$'
    ## regex expression found at (but adapted, for Straß1)
    ## https://stackoverflow.com/questions/24132763/regex-how-many-strings-start-with-letters-and-end-with-numbers/24132850
    rgx4 = '[A-Za-z]+.*\d{1,4}$'

    for sub in lst:
        if (not re.search(rgx1, sub)) and (
                not re.search(rgx2, sub) and (not re.search(rgx3, sub)) and (not re.search(rgx4, sub))):
            sub = sub.strip()
            # print(sub)
            out_lst.append(sub)
        else:
            pass
    out_text = ', '.join(out_lst)
    return out_text


def identify_owners(text, return_count=False):
    ## check if text is not empty
    if (text == None) or (text == ''):
        text = 'unbekannt'

    ## clean text a little bit
    text = text.lower()
    text = text.strip(',')
    text = text.strip()

    ## split at breaks
    lst = text.split('\n')

    ## remove addresses and 'born as names'
    owner_lst = []
    for item in lst:
        item = remove_born_as_names(item, 'geb.')
        item = remove_adress(item)

        ## if there is an asterisk in the item, then the part after the asterisk is an adress that is cut off
        ## (e.g. 'lack', 'wolfgang', '* 1999-99-99', 'bah'] --> bah = bahnhofstraße
        ## this part should be removed
        cut_lst = item.split(',')
        if any("*" in item for item in cut_lst):
            ind = [i for i, item in enumerate(cut_lst) if '*' in item][0]
            cut_lst = cut_lst[:ind + 1]
        item = ', '.join(cut_lst)

        owner_lst.append(item)

    ## check if last owner, which is sometimes a string that is cut off,
    ## can be found in any of the previous items
    last_item = owner_lst[-1]
    if any(last_item in prev_item for prev_item in owner_lst[:-1]):
        owner_lst.remove(last_item)
    else:
        pass

    owner_lst = [item.strip() for item in owner_lst]

    ## derive unique owners or number of owners
    unique_owners = list(set(owner_lst))
    out = ' | '.join(unique_owners)
    out = out.replace('  ', ' ')
    if return_count == True:
        out = len(unique_owners)

    return out


def assign_addresses(owners, owner_string):
    # print(owners)
    # print(owner_string)

    owner_lst = owners.split('|')
    owner_lst = [item.strip() for item in owner_lst]

    ## Define regex expressions
    ## find 4- or 5-digit numbers and a subsequent word
    rgx1 = r'\d{4,5} \b\w+\b'
    ## find just 5-digit numbers
    rgx2 = r'\d{5}'
    ## find street names with regex expression found at (for Straße 1, Straße 1a, Straße 1 a)
    ## https://stackoverflow.com/questions/5014537/regex-parse-streetname-number/5014624
    ## similar, but not quite working rgx3 = '(?:[^ ]+ ){0,5}\d{1,4} [a-f]?$'
    rgx3 = '^(.+)\s(\d+(\s*[^\d\s]+)*)$'
    ## regex expression found at (but adapted, for Straß1)
    ## https://stackoverflow.com/questions/24132763/regex-how-many-strings-start-with-letters-and-end-with-numbers/24132850
    rgx4 = '[A-Za-z]+.*\d{1,4}$'

    ## get length of  the complete owner string so that it can be searched till the end
    length = len(owner_string)

    addresses_all = []
    # owner= owner_lst[0]
    for owner in owner_lst:
        # print(owner)
        addresses_owner = []
        indices = []

        ## find start and end indices of current owner name + birthdate in complete owner string
        ## replace special characters, so that re is not confused
        owner_search = owner.replace('*', '_')
        owner_search = owner_search.replace('(', '_')
        owner_search = owner_search.replace(')', '_')
        owner_search = owner_search.replace('/', '_')
        owner_search = owner_search.replace('+', '_')
        # owner_search = owner_search.replace('.', '_')
        # owner_search = owner_search.replace('-', '_')

        owner_string_search = owner_string.replace('*', '_')
        owner_string_search = owner_string_search.replace('(', '_')
        owner_string_search = owner_string_search.replace(')', '_')
        owner_string_search = owner_string_search.replace('/', '_')
        owner_string_search = owner_string_search.replace('+', '_')
        # owner_string_search = owner_string_search.replace('.', '_')
        # owner_string_search = owner_string_search.replace('-', '_')

        for match in re.finditer(owner_search, owner_string_search):
            indices.append((match.start(), match.end()))
        # print(indices)

        ## loop through indices and check if the next two sub parts of the owner string (defined by ',')
        ## are a street+housenumber and a postal code + city name
        # i=0
        for i in range(len(indices)):
            owner_string_sub = owner_string[indices[i][1]:length]
            owner_string_sub = owner_string_sub.strip(',')
            owner_string_sub = owner_string_sub.split(',')
            owner_string_sub = owner_string_sub[:2]

            street_num = ''
            # sub = owner_string_sub[0]
            for sub in owner_string_sub:
                if street_num == '':
                    if re.search(rgx3, sub):
                        street_num = sub
                if street_num == '':
                    if re.search(rgx4, sub):
                        street_num = sub

            city_plz = ''
            for sub in owner_string_sub:
                if city_plz == '':
                    if re.search(rgx1, sub):
                        city_plz = sub
                if city_plz == '':
                    if re.search(rgx2, sub):
                        city_plz = sub

            address = street_num + ',' + city_plz
            address = address.strip(',')
            address = address.strip(' ')
            if len(address) > 1:
                addresses_owner.append(address)
            else:
                ## ToDo:
                addresses_owner.append('unkown 1, 00000 unkown')

        addresses_owner = [item.strip() for item in addresses_owner]
        addresses_owner = list(set(addresses_owner))
        addresses_owner = '_'.join(addresses_owner)
        addresses_all.append(addresses_owner)

    addresses_all = [item.strip() for item in addresses_all]
    addresses_all = ' | '.join(addresses_all)
    # print(addresses_all)

    return addresses_all


def separate_owner_names_and_addresses_automatically():
    ## read land parcels, extract parcel ID and owner string
    df = gpd.read_file(IN_SHP)
    df = pd.DataFrame(df)
    df = df[['OGC_FID', 'EIGENTUEME', 'AMTLFLSFL', 'area']]

    ## to lowercase, replace empty strings, remove commas at end of string
    df['owner_string'] = df['EIGENTUEME'].str.lower()
    df.loc[df['EIGENTUEME'].isnull(), 'owner_string'] = 'unbekannt'
    df['owner_string'] = df['owner_string'].str.rstrip(',')

    ## Get some characteristics of owner names
    ## Count breaks (indicates number of owners)
    ## Count asterisks (indicates number of owners)
    df['break_count'] = df['owner_string'].str.count('\n')
    df['asterisk_count'] = df['owner_string'].str.count('\*')

    ## clean owner string
    df['owner_string'] = df['owner_string'].apply(
        replace_characters_in_string, char_lst=['\n'], replace_string=',')
    df['owner_string'] = df['owner_string'].apply(
        replace_characters_in_string, char_lst=['  '], replace_string=' ')
    df['owner_string'] = df['owner_string'].apply(
        replace_characters_in_string, char_lst=['(mehrere)'], replace_string='')
    df['owner_string'] = df['owner_string'].apply(
        replace_characters_in_string, char_lst=['mehrere'], replace_string='')
    df['owner_string'] = df['owner_string'].str.strip(',')

    ## remove "geb. xxx" (born as xxx) strings
    df['owner_string'] = df['owner_string'].apply(
        remove_born_as_names, search_term='geb.'
    )

    ## count commas
    df['comma_count'] = df['owner_string'].str.count(',')

    ## remove adresses
    df['owner_names'] = df['owner_string'].apply(remove_adress)

    ## separate single owners from multiple owners
    df['own_num'] = 0
    df.loc[(df['break_count'] == 0) & (df['asterisk_count'] < 2) & (df['comma_count'] < 5), 'own_num'] = 1

    ## in a very few cases the owner_string is NaN, because the whole string is only one
    ## MAYBE INSTEAD OF isna() use == ''
    df.loc[df['owner_string'].isna(), 'owner_names'] = 'unbekannt'
    df.loc[df['owner_string'].isna(), 'owner_string'] = 'unbekannt'

    ## in some cases the owner names are mistaken by addresses. After checking, we assume that there is pretty certain
    ## only one owner entity and we can assume that the first part of the owner string is the owner name
    df.loc[(df['own_num'] == 1) & (df['owner_names'] == ''), 'owner_names'] = df.apply(
        lambda row: row.owner_string.split(',')[0], axis=1)

    ## in a
    df.loc[(df['own_num'] == 0), 'owner_names'] = df['EIGENTUEME'].apply(identify_owners, return_count=False)
    df.loc[(df['own_num'] == 0), 'own_num'] = df['EIGENTUEME'].apply(identify_owners, return_count=True)

    ## OPTIONAL: after exporting to csv and reading in again, some cases are NaNs,
    ## because their names are confused with streets. All these cases seem to be only single owners,
    ## thus the first occurence is their name
    ## MAYBE INSTEAD OF isna() use == ''
    df.loc[(df['own_num'] == 1) & (df['owner_names'].isna()), 'owner_names'] = df.apply(
        lambda row: row.owner_string.split(',')[0], axis=1)

    # replace owner strings for special cases, that let the assign_addresses function crash
    df.loc[df[
               'owner_names'] == 'die gesamtheit der beteiligten', 'owner_string'] = 'die gesamtheit der beteiligten, unkown 1, 00000 unkown'
    df.loc[df['owner_names'] == 'wirwich, inge, * 1933-01-01 | +17.11.1979', 'owner_string'] = 'wirwich, inge, * 1933-01-01'

    df['addresses'] = df.apply(lambda row: assign_addresses(row.owner_names, row.owner_string), axis=1)

    ## Get owners for which no addresses could be assigned and write to file for manual address identification
    df_miss = df.loc[df['addresses'] == '']
    df_miss = df_miss[['EIGENTUEME', 'owner_names', 'addresses']].copy()
    df_miss.drop_duplicates(subset='EIGENTUEME', inplace=True)
    df_miss.to_csv(OUT_CSV_MANUAL_ASSIGNMENT, sep=';', index=False, encoding='ISO 8859-15')

    ## Write current result df to disc
    df.to_csv(OUT_CSV, sep=';', index=False)


def assign_missing_addresses_to_owners():
    df = pd.read_csv(OUT_CSV, sep=';')
    df_man = pd.read_csv(OUT_CSV_MANUAL_ASSIGNMENT, sep=';', encoding='ISO 8859-15')

    for i, eig in enumerate(df_man['EIGENTUEME']):
        owner_names = eig.lower()
        owner_names = owner_names.strip(',')
        owner_names = owner_names.strip()
        df.loc[df['EIGENTUEME'] == eig, 'owner_names'] = owner_names
        address = df_man['addresses'].iloc[i]
        address = address.lower()
        address = address.strip(',')
        address = address.strip()
        print(i, owner_names)
        print(address + '\n')
        df.loc[df['EIGENTUEME'] == eig, 'addresses'] = address

    df.to_csv(OUT_CSV, sep=';', index=False)


def main():

    stime = time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())
    print("start: " + stime)
    os.chdir(WD)

    # separate_owner_names_and_addresses_automatically()
    assign_missing_addresses_to_owners()

    etime = time.strftime("%a, %d %b %Y %H:%M:%S", time.localtime())
    print("start: " + stime)
    print("end: " + etime)

if __name__ == '__main__':
    main()


## Manually assign addresses of these OGC_FIDs
# lst = [3131, 4897, 4898, 5851, 5852, 5853, 5861, 5949, 5976, 5977, 6407, 23955, 23977, 24013, 24044, 24326,
#        24341, 24449, 24450, 24454, 24457, 24459, 24491, 24503, 24533, 24550, 24579, 24581, 24584, 24617,
#        24618, 24638, 24700, 25336, 33537, 33539, 54221, 54222, 54224, 54254, 54259, 54281, 67625, 67652,
#        67721, 67809, 67810, 67832, 67847, 67855, 67874, 67877, 67878, 67951, 67964, 69131, 69203, 69216,
#        69306, 69457, 69459, 69480, 69493, 69494, 69496, 69500, 69506, 69513, 69548, 73794, 73801, 73820,
#        73825, 73831, 73845, 93902, 93907, 93909, 93912, 93958, 93982, 94013, 94136, 94150, 94158, 94159,
#        94193, 94202, 94206, 94209, 94211, 94219, 94248, 94269, 94284, 94327, 94331, 94338, 94359, 94412,
#        94414, 94417, 94426, 94440, 94441, 94929, 95024, 95404, 95989, 95997, 96008, 96015, 96017, 96022,
#        96035, 96036, 96039, 96045, 96049, 96054, 96059, 96061, 96068, 96072, 96076, 96078, 96087, 96103,
#        96111, 96113, 96132, 96141, 96143, 96149, 96150, 96151, 96152, 96159, 96165, 96167, 96176, 96188,
#        96197, 96203, 96209, 96217, 96223, 96226, 96231, 96232, 96234, 96244, 96253, 96266, 96274, 96275,
#        96278, 96287, 96298, 96300, 96319, 96331, 96336, 96340, 96353, 96358, 96366, 96369, 96385, 96409,
#        96416, 96419, 96420, 96427, 96441, 96454, 96455, 96460, 96485, 96493, 96496, 96498, 96499, 96507,
#        96516, 96517, 96519, 96520, 96526, 96530, 96533, 96535, 96542, 96543, 96551, 96552, 96557, 96559,
#        96560, 96564, 96565, 96567, 96570, 96580, 96581, 96582, 96586, 96588, 96589, 96590, 96591, 96600,
#        96601, 96602, 96604, 96605, 96606, 96622, 96626, 96635, 96636, 96638, 96644, 96646, 96647, 96653,
#        96654, 96656, 96661, 96665, 96666, 96667, 96691, 96693, 96695, 96705, 96707, 96712, 96714, 96716,
#        96728, 96731, 96732, 96734, 96741, 96744, 96746, 96748, 96760, 96772, 96774, 96775, 96778, 96780,
#        96787, 96798, 96810, 96813, 96814, 96818, 96831, 96834, 96835, 96836, 96845, 96855, 96856, 96859,
#        96866, 96867, 96876, 96896, 96901, 96902, 96904, 96906, 96909, 96910, 96913, 96919, 96921, 96928,
#        96929, 96936, 96939, 96967, 96969, 96983, 96997, 96999, 97000, 97015, 97021, 97040, 97042, 97047,
#        97048, 97049, 97081, 97089, 97091, 97098, 97110, 97111, 97115, 97117, 97135, 97147, 97153, 97172,
#        97181, 97184, 97185, 97187, 97213, 97217, 97236, 97264, 97265, 97278, 97279, 97330, 97343, 97372,
#        97373, 97374, 97375, 97386, 97391, 97396, 97399, 97408, 97409, 97412, 97420, 97423, 97429, 97445,
#        97455, 97457, 97458, 97467, 97469, 97470, 97475, 97484, 97486, 97488, 97489, 97490, 97491, 97507,
#        97509, 97513, 97516, 97518, 97538, 97540, 97551, 97554, 97555, 97556, 97557, 97558, 97577, 97578,
#        97581, 97582, 97584, 97586, 97589, 97590, 97630, 97631, 97632, 97633, 97634, 97643, 97647, 97653,
#        97659, 97663, 97666, 97675, 97676, 97679, 97683, 97687, 97688, 97694, 97700, 97718, 97736, 97770,
#        97771, 97778, 97779, 97790, 97796, 97797, 97798, 97807, 97809, 97818, 97819, 97826, 97841, 97844,
#        97860, 97878, 97879, 97880, 97882, 97883, 97886, 97903, 97951, 97952, 97954, 97963, 97970, 97971,
#        97980, 97981, 97983, 97989, 97994, 98003, 98006, 98012, 98034, 98049, 98057, 98075, 98077, 98082,
#        98084, 98113, 98118, 98125, 98129, 98135, 98137, 98139, 98145, 98157, 98162, 98165, 98188, 98682,
#        98720, 98723, 98747, 98807, 98812, 98881, 98886, 98986, 98988, 98989, 98990, 99035, 99052, 99074,
#        99082, 99764, 99766, 99768, 99773, 99778, 99784, 99786, 99846, 99854, 99869, 99881, 99886, 99889,
#        99893, 99899, 99905, 99911, 99935, 99949, 99964, 99967, 99977, 99978, 99988, 100027, 100030, 100033,
#        100055, 100077, 100078, 100089, 100117, 100124, 100130, 100137, 100149, 100157, 100180, 100195, 100198,
#        100228, 100261, 100275, 100290, 100299, 100310, 100333, 100342, 100356, 100407, 100465, 100472, 100532,
#        100556, 100557, 100562, 100563, 100573, 100590, 100592, 100667, 100670, 100684, 100695, 100702, 100703,
#        100704, 100706, 100709, 100712, 100737, 100749, 100757, 100759, 100762, 100769, 100820, 100824, 100825, 100826,
#        100853, 100861, 100877, 100886, 100894, 100895, 100899, 100900, 100903, 100919, 100920, 100926, 101027, 101029,
#        101030, 101035, 101045, 101047, 101075, 101076, 101099, 101116, 101127, 101132, 101133, 101138, 101149, 101151,
#        101158, 101172, 101177, 101197, 101199, 101201, 101204, 101221, 101223, 101224, 101244, 101246, 101252, 101360,
#        101407, 101433, 101483, 101514, 101610, 101737, 101763, 101783, 101815, 101911, 102456, 102457, 102458, 102527,
#        102625, 102648, 102863, 102882, 102916, 102992, 103101, 103131, 103132, 103133, 103142, 103162, 103240, 103254,
#        103263, 103301, 103351, 103417, 103422, 103444, 103446, 103456, 103457, 103482, 103493, 103587, 103633, 103637,
#        103948, 104067, 104123, 104153, 104267, 104268, 104290, 104308, 104324, 104750, 104824, 104879, 104886, 104887,
#        104896, 104911, 104913, 104918, 104920, 104922, 104923, 104928, 104943, 104947, 104963, 104990, 105022, 105032,
#        105049, 105050, 105067, 105086, 105091, 105201, 105206, 105225, 105226, 105233, 105237, 105245, 105251, 105279,
#        105300, 105306, 105359, 105388, 105398, 105399, 105404, 105409, 105433, 105460, 105542, 106262, 106303, 106306,
#        111095, 114634, 117844, 118564, 153345, 156288, 162933, 163041, 163103, 163123, 163360, 163431, 163471, 165340,
#        165341, 165415, 178785, 179072, 179075, 179201, 179221, 179507, 179542, 179563, 179583, 179606, 179776, 179796,
#        180570, 180594, 183452, 183455, 183460, 183462, 183468, 183526, 186734, 186736, 187194, 188195, 188196, 188240,
#        188851, 189046, 189065, 189092, 189528, 189534, 198656, 199320, 199322, 199726, 212995, 213079, 216347, 221071,
#        221234, 239636, 253148, 253750, 253920, 254015, 256063, 256068, 257375, 257380, 270298, 281979, 282038, 282138,
#        282617, 302382, 305462, 305466, 305467, 305469, 305470, 305472, 305473, 305477, 305478, 337053, 340175, 340189,
#        340204, 340293, 341867, 343784, 378952, 421548, 433947, 442128, 442366, 442371, 442519, 442521, 443394, 443399,
#        446053, 447859, 449953, 449990, 449992, 450030, 450031, 450038, 450046, 450057, 450058, 450059, 450060, 450065,
#        450068, 450070, 450492, 451127, 466059, 466072, 466077, 466078, 466088, 466089, 466101, 466103, 466150, 466151,
#        466152, 466186, 466249, 482457, 482673, 488048, 488146, 488289, 497607, 510158, 510160, 510175, 510208, 510227,
#        510228, 510242, 510261, 510262, 513092, 513094, 513095, 513101, 513104, 513107, 513116, 513120, 518911, 518915,
#        518919, 518948, 527722, 527913, 527990, 527993, 527995, 531007, 531036, 531620, 531623, 531634, 531672, 536100,
#        536836, 537146, 539417, 539498, 539499, 539500, 539505, 539506, 539532, 539534, 539546, 539550, 539551, 539553,
#        539555, 539561, 539564, 539565, 539600, 539614, 539643, 539654, 539670, 539701, 539715, 539721, 539728, 539746,
#        539755, 539759, 542857, 544254, 544256, 544315, 544335, 544363, 544364, 544377, 548303, 550398, 551273, 551274,
#        551278, 552022, 552331, 552380, 553342, 553396, 553486, 553621, 558000, 558459, 558461, 558671, 558843, 564661,
#        564666, 567858, 569149, 569150, 571150, 571151, 571184, 571216, 571227, 571246, 571263, 571301, 571345, 571373,
#        572114, 574715, 574961, 574963, 575018, 575019, 575174, 575181, 575183, 575185, 575201, 575203, 580309, 580350,
#        584176, 594058, 594207, 615398, 615521, 615662, 615720, 615722, 615735, 615771, 615862, 615933, 615938, 616005,
#        651869, 660589, 760036, 765295, 766997, 767091, 788952, 815207, 816957, 817296, 839573, 839671, 839817, 857864,
#        867228, 867232, 895367, 927023, 934044, 994726, 994727, 999464, 999548, 999564, 999569, 999622, 999647, 999648,
#        999650, 999766, 999840, 999848, 999945, 999959, 999971, 1000999, 1012490, 1012520, 1018076, 1018083, 1018106,
#        1018130, 1018151, 1018152, 1018214, 1018224, 1022498, 1022522, 1023563, 1030338, 1030365, 1030367, 1044732,
#        1044738, 1063136, 1069668, 1070501, 1081655, 1084902, 1135465, 1138232, 1138234, 1143384, 1143386, 1143416,
#        1148240, 1148419, 1148431, 1149045, 1163541, 1163687, 1163688, 1163728, 1163748, 1163753, 1163754, 1163761,
#        1163762, 1163771, 1163772, 1163851, 1163853, 1163878, 1163880, 1163882, 1163884, 1163885, 1163888, 1163895,
#        1163912, 1163914, 1163916, 1163930, 1163960, 1163965, 1163966, 1163971, 1163972, 1163974, 1163976, 1163981,
#        1164018, 1164034, 1164053, 1164055, 1164057, 1164059, 1164063, 1164069, 1164081, 1164118, 1164119, 1164124,
#        1164125, 1164127, 1164134, 1164137, 1164140, 1164151, 1164152, 1164155, 1164164, 1164166, 1164173, 1164174,
#        1164175, 1164180, 1164181, 1164183, 1164191, 1164194, 1164200, 1164208, 1164212, 1164214, 1164229, 1164232,
#        1164234, 1164254, 1164259, 1164260, 1164269, 1164272, 1164288, 1164308, 1164313, 1164314, 1164318, 1164323,
#        1164330, 1164337, 1164338, 1164339, 1164341, 1164343, 1164367, 1164368, 1164372, 1164379, 1164380, 1164384,
#        1164408, 1164410, 1164411, 1164415, 1164430, 1166497, 1166708, 1167390, 1167392, 1167603, 1168487, 1168488,
#        1169537, 1169938, 1171382, 1171457, 1171484, 1171506, 1171509, 1171579, 1171594, 1171597, 1171626, 1171742,
#        1171798, 1172173, 1172361, 1172372, 1172374, 1172386, 1172413, 1172484, 1172741, 1172981, 1172982, 1172987,
#        1173023, 1173024, 1173026, 1173028, 1173036, 1173037, 1173039, 1173045, 1173047, 1173048, 1173050, 1173051,
#        1173052, 1173053, 1173055, 1173056, 1173057, 1173062, 1173063, 1173065, 1173068, 1173070, 1173071, 1173072,
#        1173075, 1173080, 1173088, 1173089, 1173091, 1173092, 1173106, 1173107, 1173109, 1173110, 1173120, 1173122,
#        1173124, 1173126, 1173127, 1173147, 1173156, 1173157, 1173163, 1173165, 1173167, 1173180, 1173181, 1173182,
#        1173183, 1173185, 1173186, 1173187, 1173188, 1173190, 1173192, 1173193, 1173201, 1173202, 1173203, 1173205,
#        1173208, 1173211, 1173213, 1173216, 1173219, 1173226, 1173228, 1173231, 1173232, 1173233, 1173234, 1173236,
#        1173240, 1173241, 1173248, 1173249, 1173251, 1173252, 1173253, 1173254, 1173255, 1173257, 1173267, 1173268,
#        1173269, 1173270, 1173275, 1173276, 1173287, 1173288, 1173289, 1173290, 1173292, 1173300, 1173302, 1173305,
#        1173308, 1173309, 1173317, 1173320, 1173327, 1173331, 1173333, 1173339, 1173346, 1173348, 1173358, 1173362,
#        1173364, 1173365, 1173366, 1173368, 1173370, 1173372, 1173375, 1173379, 1173381, 1173383, 1173386, 1173390,
#        1173462, 1173584, 1173616, 1173624, 1173638, 1173644, 1173647, 1173648, 1173657, 1173666, 1173758, 1173763,
#        1173831, 1173838, 1173839, 1173842, 1173843, 1173844, 1173846, 1173847, 1173848, 1173850, 1173867, 1173900,
#        1173906, 1173908, 1173921, 1173929, 1173941, 1173969, 1173970, 1173990, 1174003, 1174020, 1174029, 1174043,
#        1174065, 1174533, 1174588, 1174590, 1174600, 1174607, 1174618, 1174640, 1174659, 1174666, 1174685, 1174708,
#        1174723, 1174736, 1174828, 1174853, 1174854, 1174859, 1174922, 1174947, 1174959, 1174967, 1174971, 1175026,
#        1175062, 1175063, 1175071, 1176363, 1176370, 1176371, 1176389, 1176404, 1176461, 1177205, 1177207, 1177224,
#        1177225, 1177282, 1177296, 1177384, 1177391, 1177422, 1177516, 1177521, 1177522, 1177570, 1177587, 1177596,
#        1177602, 1177608, 1177611, 1177620, 1177622, 1177629, 1179301, 1179429, 1180780, 1180880, 1181144, 1182434,
#        1182449, 1182455, 1182464, 1183795, 1183816, 1183830, 1183839, 1183842, 1183931, 1183938, 1183963, 1184067,
#        1184072, 1184075, 1184081, 1184085, 1184090, 1184093, 1184095, 1184097, 1184101, 1184114, 1184115, 1184116,
#        1184150, 1184188, 1184257, 1184260, 1184270, 1184282, 1184323, 1184364, 1184402, 1184410, 1184425, 1184446,
#        1184584, 1184611, 1184616, 1184645, 1184648, 1184653, 1184655, 1184664, 1184690, 1184706, 1184709, 1184718,
#        1184719, 1184739, 1184740, 1185823, 1185825, 1185826, 1185836, 1185839, 1185864, 1185865, 1185867, 1185880,
#        1185881, 1185882, 1185892, 1185923, 1185928, 1185930, 1185932, 1185937, 1185942, 1185945, 1185969, 1185987,
#        1186043, 1186044, 1186052, 1186077, 1186101, 1186118, 1186119, 1189563, 1196531, 1196559, 1196563, 1196833,
#        1196834, 1197288, 1197773, 1202043, 1202058, 1202082, 1202752, 1212978, 1212979, 1213012, 1213021, 1213033,
#        1213097, 1213101, 1213146, 1213376, 1213497, 1213508, 1213511, 1213515, 1213893, 1218060, 1218159, 1218161,
#        1218184, 1218203, 1218275, 1218364, 1218443, 1218518, 1218521, 1218531, 1218532, 1218546, 1218555, 1218619,
#        1218621, 1218623, 1218780, 1218785, 1218788, 1218791, 1218801, 1218808, 1218824, 1218853, 1218856, 1218868,
#        1218884, 1218895, 1218927, 1220865, 1220888, 1220904, 1220906, 1220910, 1220915, 1220924, 1220925, 1220960,
#        1220964, 1220967, 1221011, 1221013, 1221017, 1221029, 1221038, 1221040, 1221041, 1221043, 1221047, 1221051,
#        1221057, 1221058, 1221090, 1221096, 1221098, 1221100, 1221120, 1221142, 1221155, 1221156, 1221550, 1221924,
#        1221926, 1225341, 1225343, 1225349, 1225352, 1225356, 1225357, 1225358, 1225360, 1225362, 1225363, 1225366,
#        1225367, 1225368, 1225385, 1225398, 1225413, 1225424, 1225428, 1225433, 1225451, 1225472, 1225504, 1225509,
#        1225510, 1225525, 1225526, 1225560, 1225564, 1225608, 1225618, 1225627, 1225719, 1225721, 1225728, 1225729,
#        1225734, 1225745, 1225747, 1225763, 1225812, 1225822, 1225833, 1225865, 1225878, 1225903, 1225908, 1225911,
#        1225916, 1225928, 1225944, 1225947, 1225977, 1225984, 1225989, 1225996, 1226005, 1226015, 1226019, 1226039,
#        1226040, 1226046, 1226050, 1226054, 1226057, 1226058, 1226290, 1226367, 1226419, 1226447, 1228030, 1228031,
#        1228034, 1228036, 1228056, 1228061, 1228072, 1228079, 1228080, 1228085, 1228089, 1228094, 1228114, 1228120,
#        1228135, 1228147, 1228195, 1228209, 1228248, 1228349, 1228370, 1228372, 1228373, 1228408, 1228413, 1228416,
#        1228473, 1228501, 1228510, 1228531, 1228533, 1228536, 1228552, 1228560, 1228578, 1228582, 1228583, 1228589,
#        1228596, 1228598, 1228600, 1228601, 1228603, 1228635, 1228638, 1228643, 1228645, 1228661, 1228675, 1228677,
#        1228687, 1228688, 1228693, 1228700, 1228701, 1228702, 1228703, 1228704, 1228705, 1228710, 1228712, 1228713,
#        1228714, 1228717, 1228718, 1228719, 1228720, 1228721, 1228722, 1228723, 1228730, 1228733, 1228735, 1228739,
#        1228757, 1228773, 1228781, 1228786, 1228789, 1228790, 1228791, 1228798, 1228802, 1228820, 1228823, 1228825,
#        1228839, 1228841, 1228850, 1228852, 1228861, 1228866, 1228867, 1228870, 1228873, 1228874, 1228875, 1228879,
#        1228880, 1228906, 1228914, 1228915, 1228920, 1228921, 1228933, 1228936, 1228940, 1228942, 1228981, 1229010,
#        1229011, 1229012, 1229013, 1229044, 1229045, 1229046, 1229047, 1229048, 1229049, 1229050, 1229053, 1229054,
#        1229055, 1229058, 1229062, 1229083, 1229084, 1229085, 1229086, 1229089, 1229103, 1229111, 1229119, 1229150,
#        1229152, 1229168, 1229169, 1229176, 1229179, 1229182, 1229192, 1229201, 1229204, 1229209, 1229216, 1229218,
#        1229231, 1229232, 1229233, 1229248, 1229283, 1229306, 1229310, 1229320, 1229321, 1229323, 1229327, 1229331,
#        1229334, 1229351, 1229354, 1229386, 1229398, 1229409, 1229410, 1229411, 1229429, 1229475, 1229499, 1229506,
#        1229515, 1229526, 1229529, 1229532, 1229536, 1229537, 1229539, 1229541, 1229550, 1229559, 1229564, 1229565,
#        1229567, 1229568, 1229569, 1229573, 1229574, 1229575, 1229576, 1229580, 1229581, 1229585, 1229586, 1229589,
#        1229599, 1229601, 1229602, 1229607, 1229610, 1229618, 1229620, 1229639, 1229661, 1229662, 1229663, 1229674,
#        1229678, 1229679, 1229688, 1229689, 1229691, 1229692, 1229693, 1229694, 1229695, 1229697, 1229702, 1229762,
#        1229763, 1229765, 1229775, 1229787, 1229788, 1229791, 1229792, 1229793, 1229807, 1229809, 1229812, 1229823,
#        1229829, 1229834, 1229835, 1229836, 1229842, 1229843, 1229851, 1229852, 1229870, 1229871, 1229872, 1229873,
#        1229874, 1229892, 1229894, 1229895, 1229896, 1229900, 1229901, 1229904, 1229912, 1229927, 1229929, 1229939,
#        1229944, 1229945, 1229950, 1229951, 1229963, 1229965, 1229966, 1229994, 1229997, 1230038, 1230040, 1230045,
#        1230055, 1230060, 1230061, 1230063, 1230064, 1230081, 1230092, 1230094, 1230100, 1230104, 1230111, 1230114,
#        1230119, 1230122, 1230126, 1230139, 1230152, 1230195, 1230196, 1230197, 1230198, 1230208, 1230211, 1230212,
#        1230214, 1230224, 1230235, 1230242, 1230248, 1230254, 1230283, 1230286, 1230306, 1230324, 1230325, 1230337,
#        1230338, 1230350, 1230352, 1230353, 1230356, 1230363, 1230389, 1230391, 1230398, 1230404, 1230405, 1230406,
#        1230407, 1230408, 1230409, 1230411, 1230421, 1230441, 1230442, 1230444, 1230446, 1230447, 1230449, 1230452,
#        1230454, 1230455, 1230459, 1230476, 1230477, 1230478, 1230494, 1230496, 1230501, 1230503, 1230505, 1230514,
#        1230517, 1230518, 1230519, 1230521, 1230523, 1230526, 1230533, 1230537, 1230539, 1230562, 1230563, 1230564,
#        1230608, 1230611, 1230649, 1230657, 1230664, 1230670, 1230680, 1230681, 1230689, 1230691, 1230704, 1230709,
#        1230710, 1230724, 1230726, 1230740, 1230768, 1230782, 1230787, 1230791, 1230796, 1230811, 1230812, 1230819,
#        1230823, 1230830, 1230838, 1230842, 1230852, 1230853, 1230863, 1230886, 1230888, 1230896, 1230901, 1230918,
#        1230922, 1230936, 1230937, 1230938, 1230939, 1230940, 1230941, 1230942, 1230943, 1230944, 1230946, 1230953,
#        1230954, 1230957, 1230958, 1230959, 1230960, 1230961, 1230969, 1230970, 1230971, 1230972, 1230973, 1230980,
#        1230981, 1230987, 1230992, 1231011, 1231012, 1231013, 1231016, 1231021, 1231024, 1231029, 1231038, 1231049,
#        1231065, 1231089, 1231102, 1231103, 1231121, 1231128, 1231129, 1231134, 1231136, 1231140, 1231154, 1231158,
#        1231161, 1231163, 1231166, 1231167, 1231168, 1231169, 1231175, 1231181, 1231205, 1231235, 1231249, 1231252,
#        1231253, 1231254, 1231255, 1231266, 1231278, 1231286, 1231298, 1231299, 1231305, 1231311, 1231318, 1231319,
#        1231324, 1231328, 1231331, 1231335, 1231337, 1231344, 1231363, 1231365, 1231374, 1231378, 1231379, 1231381,
#        1231382, 1231383, 1231391, 1231392, 1231399, 1231401, 1231405, 1231415, 1231431, 1231443, 1231466, 1231471,
#        1231477, 1231481, 1231495, 1231496, 1231498, 1231504, 1231506, 1231507, 1231508, 1231529, 1231531, 1231532,
#        1231541, 1231542, 1231557, 1231558, 1231559, 1231560, 1231563, 1231565, 1231570, 1231571, 1231575, 1231576,
#        1231577, 1231591, 1231615, 1231616, 1231617, 1231618, 1231649, 1231650, 1231675, 1231676, 1231687, 1231689,
#        1231690, 1231716, 1231732, 1231738, 1231739, 1231741, 1231747, 1231748, 1231750, 1231758, 1231770, 1231786,
#        1231789, 1231803, 1231804, 1231807, 1231808, 1231809, 1231820, 1231852, 1231859, 1231914, 1231923, 1231935,
#        1231936, 1231937, 1231948, 1231949, 1231950, 1231955, 1231968, 1231970, 1231973, 1231975, 1231976, 1231979,
#        1231980, 1231984, 1231992, 1231999, 1232002, 1232003, 1232004, 1232005, 1232006, 1232017, 1232029, 1232034,
#        1232035, 1232037, 1232078, 1232091, 1232093, 1232104, 1232105, 1232107, 1232118, 1232123, 1232124, 1232126,
#        1232131, 1232134, 1232140, 1232144, 1232149, 1232150, 1232153, 1232156, 1232163, 1232164, 1232168, 1232172,
#        1232178, 1232186, 1232196, 1232203, 1232210, 1232239, 1232241, 1232250, 1232263, 1232270, 1232275, 1232276,
#        1232282, 1232297, 1232301, 1232312, 1232328, 1232332, 1232333, 1232341, 1232349, 1232351, 1232357, 1232362,
#        1232363, 1232368, 1232407, 1232459, 1232472, 1232495, 1232530, 1232556, 1232558, 1232590, 1232595, 1232608,
#        1232609, 1232611, 1232614, 1232616, 1232621, 1232622, 1232627, 1232645, 1232667, 1232688, 1232711, 1232712,
#        1232713, 1232714, 1232716, 1232722, 1232736, 1232742, 1232754, 1232755, 1232757, 1232775, 1232906, 1232961,
#        1232967, 1233009, 1233018, 1234296, 1234634, 1234637, 1234640, 1234656, 1234688, 1234691, 1234699, 1234702,
#        1234712, 1234713, 1234718, 1234730, 1234731, 1234747, 1234752, 1236566, 1236571, 1236578, 1236591, 1236625,
#        1236656, 1236743, 1236759, 1236764, 1236769, 1236863, 1236870, 1236882, 1236883, 1236904, 1236917, 1236937,
#        1237024, 1237071, 1237081, 1237145, 1237163, 1237180, 1237202, 1237212, 1237335, 1237361, 1237362, 1237376,
#        1237432, 1237452, 1237499, 1237509, 1237592, 1237814, 1237946, 1237947, 1237965, 1237967, 1237972, 1237973,
#        1237980, 1237983, 1237986, 1237990, 1237994, 1237997, 1237998, 1238018, 1238089, 1238101, 1238118, 1238119,
#        1238121, 1238131, 1238135, 1238143, 1238152, 1238154, 1238161, 1238164, 1238177, 1238186, 1238195, 1238206,
#        1238207, 1238210, 1238221, 1238225, 1238241, 1238341, 1238348, 1238350, 1238356, 1238373, 1238387, 1238388,
#        1238430, 1238435, 1238440, 1238587, 1238599, 1238639, 1238643, 1238661, 1238716, 1238719, 1238720, 1238725,
#        1238749, 1238767, 1238769, 1238776, 1238777, 1238796, 1238800, 1238804, 1238826, 1238829, 1238855, 1238856,
#        1238885, 1238910, 1238912, 1238913, 1238928, 1238947, 1238978, 1238990, 1238992, 1238996, 1238998, 1239019,
#        1249521, 1249582, 1249647, 1249733, 1250555, 1258943, 1258966, 1258997, 1259042, 1259146, 1259177, 1260920,
#        1260921, 1260960, 1261049, 1261069, 1261084, 1261129, 1261143, 1261146, 1261164, 1261226, 1261237, 1261277,
#        1261287, 1261294, 1261321, 1261329, 1261332, 1261343, 1261349, 1261374, 1261386, 1261399, 1261401, 1261402,
#        1261403, 1261408, 1261412, 1261608, 1261656, 1261674, 1262874, 1262941, 1262964, 1262965, 1262966, 1262975,
#        1262982, 1262996, 1263054, 1263055, 1283996, 1302914, 1303362, 1318614, 1327532, 1327534, 1327544, 1327579,
#        1329342, 1329370, 1329389, 1329391, 1329395, 1329399, 1329400, 1329526, 1329528, 1329569, 1329575, 1329604,
#        1331072, 1351280, 1359092, 1359343, 1359345, 1367291, 1370459, 1371861, 1371914, 1372199, 1372204, 1389846,
#        1395375, 1395637, 1398109, 1399242, 1399289, 1399402, 1399882, 1400970, 1401132, 1401532, 1401802, 1404559,
#        1405179]
